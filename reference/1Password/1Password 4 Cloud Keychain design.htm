<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js"> <!--<![endif]-->
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
        <title>1Password 4 Cloud Keychain design</title>
        <meta name="description" content="The design of the 1Password Cloud keychain format">
        <meta name="viewport" content="width=device-width">

        <!-- Place favicon.ico and apple-touch-icon.png in the root directory -->
        <link rel="stylesheet" href="/css/style.css">
        <link rel="stylesheet" type="text/css" href="/css/vendor/fancybox/jquery.fancybox.css" media="screen" />
        <link rel="stylesheet" type="text/css" href="/css/vendor/fancybox/jquery.fancybox-buttons.css" media="screen" />
        <link rel="stylesheet" type="text/css" href="/css/vendor/fancybox/jquery.fancybox-thumbs.css" media="screen" />
        <link rel="stylesheet" type="text/css" href="/css/vendor/image-annotate/annotation.css" media="screen" />
        <script src="/js/vendor/modernizr-2.6.1.min.js"></script>

    </head>
    <body>
        <!--[if lt IE 7]>
            <p class="chromeframe">You are using an outdated browser. <a href="http://browsehappy.com/">Upgrade your browser today</a> or <a href="http://www.google.com/chromeframe/?redirect=true">install Google Chrome Frame</a> to better experience this site.</p>
        <![endif]-->
    <div id="wrapper">
    <header id="siteNav">
        <h1>
            <div class="switch">
                <div class="button">
                    <a href="https://agilebits.com"><img src="/images/sitetheme/logo-agile.png" alt="Agile" id="siteLogoAgile" /></a>
                </div>
                <a href="https://agilebits.com"><img src="/images/sitetheme/logo-bits.png" alt="Bits" id="siteLogoBits" /></a>
            </div>
        </h1>
        <nav>
            <ul>
                <li id="navOnepassword"><a href="https://agilebits.com/onepassword">1Password</a></li>
                <li id="navKnox"><a href="https://agilebits.com/knox">Knox</a></li>
                <li id="navDownloads"><a href="https://agilebits.com/downloads">Downloads</a></li>
                <li id="navBlog"><a href="http://blog.agilebits.com">Blog</a></li>
                <li id="navHelp"><a href="http://learn.agilebits.com">Help</a></li>
                <li id="navStore"><a href="https://agilebits.com/store">Store</a></li>
            </ul>
        </nav>
        <img src="/images/sitetheme/site-nav-shadow.png" id="siteNavShadow" />
    </header>
    <nav id="sectionNav" markdown="1">
        
        <h2 id="password-security">1Password Security</h2>

<h4 id="introduction"><a href="/1Password4/Security/security-index.html">Introduction</a></h4>

<h4 id="new-for-1password-4new"><a href="/1Password4/Security/1P4-security-changes.html">New for 1Password 4</a></h4>

<h5 id="technical-designclouddesign"><a href="/1Password4/Security/keychain-design.html">Technical Design</a></h5>

<h4 id="security-featuressecfeatures"><a href="/1Password4/Security/security-overview.html">Security Features</a></h4>

<h4 id="your-privacyprivacy"><a href="/1Password4/Security/privacy.html">Your Privacy</a></h4>

<h3 id="back-to-user-guides"><a href="../../">Back to User Guides</a></h3>


    </nav>

    <section id="content">
    <!-- Add your site or application content here -->
    <h1>1Password 4 Cloud Keychain design</h1>

    
<h2 class="no_toc" id="introduction">Introduction</h2>

<p>This is a technical document detailing the 1Password Cloud Keychain format, introduced with 1Password 4 for iOS in December 2012. </p>

<p>The <a href="http://help.agilebits.com/1Password3/agile_keychain_design.html" title="Agile Keychain Design">Agile Keychain format</a> was introduced in 2008 as a successor to using OS X Keychain integration. It proved to be much more reliable for syncing, and gave us flexibility in design, efficient and reliable syncing, and portability across a variety of platforms. It was definitely a <em>good thing</em>. We designed it not only to withstand threats from 2008, but from future threats as well.</p>

<p>Changes in available technology allow us to improve upon that design. And we can again work to design against threats that may not exist today, but which may develop in the coming years.</p>

<p>There are many design features that we keep in the 1Password 4 Cloud Keychain format, including</p>

<ol>
  <li>We continue to use JSON files for most everything.</li>
  <li>We continue to rely on existing cryptographic libraries, and do everything we can to avoid rolling our own. In particular, we use the CommonCrypto libraries for OS X and iOS.</li>
  <li>We continue to use <abbr title="Password Based Key Derivation Function Version 2">PBKDF2</abbr> for <a href="#key-derivation">key derivation</a>. (And we&rsquo;ve dramatically simplified other portions of our key derivation)</li>
  <li>We continue to have as little information as necessary decrypted at any one time when the data is &ldquo;unlocked&rdquo;</li>
  <li>We continue to be as open about our data format, implementations, and design as is practical for a non-open-source product. </li>
</ol>

<h2 class="no_toc" id="contents">Contents</h2>

<ul id="markdown-toc">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#contents">Contents</a></li>
  <li><a href="#major-changes">Major changes</a>    <ul>
      <li><a href="#fewer-separate-files">Fewer separate files</a></li>
      <li><a href="#encrypting-everything">Encrypting everything</a></li>
      <li><a href="#ciphersuits">Ciphersuits</a></li>
      <li><a href="#authenc">Authenticated encryption and data integrity</a></li>
    </ul>
  </li>
  <li><a href="#building-blocks">Building blocks</a>    <ul>
      <li><a href="#keys">Keys</a></li>
      <li><a href="#uuids">UUIDs</a></li>
      <li><a href="#opdata">opdata01</a></li>
      <li><a href="#csrng">Random number generation</a></li>
    </ul>
  </li>
  <li><a href="#directory-layout">Directory layout</a></li>
  <li><a href="#band-files">Band files</a></li>
  <li><a href="#items">Items</a>    <ul>
      <li><a href="#category"><code>category</code></a></li>
      <li><a href="#created"><code>created</code></a></li>
      <li><a href="#d"><code>d</code></a></li>
      <li><a href="#folder"><code>folder</code></a></li>
      <li><a href="#hmac"><code>hmac</code></a></li>
      <li><a href="#k"><code>k</code></a></li>
      <li><a href="#o"><code>o</code></a></li>
      <li><a href="#tx"><code>tx</code></a></li>
      <li><a href="#updated"><code>updated</code></a></li>
      <li><a href="#uuid"><code>uuid</code></a></li>
    </ul>
  </li>
  <li><a href="#foldersjs">folders.js</a></li>
  <li><a href="#profilejs">profile.js</a>    <ul>
      <li><a href="#key-derivation">Key derivation</a></li>
    </ul>
  </li>
  <li><a href="#attachments">Attachments</a>    <ul>
      <li><a href="#header">header</a></li>
      <li><a href="#metadata">metadata</a></li>
      <li><a href="#encrypted-icon">encrypted icon</a></li>
      <li><a href="#encrypted-contents">encrypted contents</a></li>
    </ul>
  </li>
  <li><a href="#sample-data-and-further-details">Sample data and further details</a></li>
</ul>

<h2 id="major-changes">Major changes</h2>

<h3 id="fewer-separate-files">Fewer separate files</h3>

<p>The <a href="http://help.agilebits.com/1Password3/agile_keychain_design.html" title="Agile Keychain Design">Agile Keychain format</a> used a separate file for each item in the user&rsquo;s keychain. Experience has taught us that not only that having each item in its own file creates difficulties for some filesystems, but that it also brings a penalty with data syncing as well. There is an overhead for synching each individual file irrespective of its size. Having hundreds or thousands of small files led to inefficient syncing in some cases. On the other hand, we don&rsquo;t want a single monolithic file, which would introduce its own problems for synchronizing 1Password data across systems.</p>

<p>We combine items into 16 bands depending on the the item&rsquo;s unique identifier (<a href="#uuids">UUID</a>). For example, all items that have a UUID beginning with &ldquo;C&rdquo; will be listed in the file <code>band_C.js</code>. Band files range from <code>band_0.js</code> to <code>band_F.j</code>. If there are no items in a particular band, there will be no band file for it.</p>

<p>We also design a data format that is appropriate for each platform and have a process that synchronizes the Cloud Keychain with a format that is most appropriate for the application. We have already been doing on iOS, effectively translating between the Agile Keychain and an SQLite database. We have also been performing this sort of translation since the introduction of the JavaScript 1Password browser extensions on the desktop. A daemon, the 1Password Helper on the Mac and the Agile 1pAgent on Windows, is what talks to the Agile Keychain directly, while the browser extensions talk to the Helper/Agent and create their own SQLite files with a copy of the 1Password data. The 1Password 4 Cloud Keychain is designed with this translation in mind, introducing an additional timestamp that records when a particular item was last translated to, or updated within, the 1Password Cloud data format. </p>

<p>We will refer to the particular data files and formats used by browser extensions or used directly by apps on particular platforms as the &ldquo;local data&rdquo;. The browser extensions or applications will be called &ldquo;clients&rdquo;. This document will not discuss the local data formats or the clients. It just focuses on the 1Password 4 Cloud Keychain, which is the format of data that will be used for synchronization and storage across networks, initially with iCloud.</p>

<h3 id="encrypting-everything">Encrypting everything</h3>

<p>The Agile Keychain kept some information (most notably Location and Title) unencrypted so that these could be used to search for or identify a particular item, while the more sensitive content could remain encrypted. With the Agile Keychain format, the browser extensions could identify and list potential matches for a website without having to be &ldquo;unlocked&rdquo;. With the JavaScript 1Password extensions, we have moved away from that. The user must unlock the data with their Master Password before they can see a list of Logins.</p>

<h4 class="no_toc" id="overview-data-and-full-content">Overview data and full content</h4>

<p>However even when 1Password is unlocked, we wish to keep as little sensitive data decrypted at any one time. So in the new format we make a distinction between &ldquo;overview&rdquo; data and the full encrypted content. Overview data contains the information that is used to sort, index, and search for items in the keychain. We can decrypt the overview data for all items after the Master Password is entered, but keep the details for each item encrypted until the particular item&rsquo;s content is needed.</p>

<h4 class="no_toc" id="unencrypted-metadata">Unencrypted metadata</h4>

<p>Some metadata remains unencrypted: Which folder an item is in; what category (Login, Credit Card, &hellip;) an item belongs to; creation time; modify time; and last sync time.</p>

<p>The item <a href="#uuids">UUIDs</a> are fully available, which can be used to determine how many attachments, if any, an item has associated with it. The UUID of any folder an item belongs to is unencrypted, and thus an attacker can determine which items are in the same folder.</p>

<h3 id="ciphersuits">Ciphersuits</h3>

<p>We use Encrypt-then-<abbr title="Message Authentication Code">MAC</abbr> authenticated encryption everywhere we use encryption. The <abbr title="Message Authentication Code">MAC</abbr> is <abbr title="Hash-Based Message Authentication Code">HMAC</abbr>-<abbr title="256-bit Secure Hash Algorithm">SHA256</abbr> and encryption is <abbr title="Advanced Encryption Standard">AES</abbr>-<abbr title="Cipher-block chaining">CBC</abbr> using 256-bit keys.  Key derivation is uses <abbr title="Password Based Key Derivation Function Version 2">PBKDF2</abbr>-<abbr title="Hash-Based Message Authentication Code">HMAC</abbr>-<abbr title="512-bit Secure Hash Algorithm">SHA512</abbr>. More detail about these choices will be presented in the relevant sections on key derivation and item encryption.</p>

<p>In this document we will refer to &ldquo;blocks of data&rdquo;. Unless otherwise stated, blocks are the length of <abbr title="Advanced Encryption Standard">AES</abbr> blocks, 128-bits (16 bytes).</p>

<h3 id="authenc">Authenticated encryption and data integrity</h3>

<p>When the Agile Keychain format was developed, chosen ciphertext attacks (<abbr title="Chosen Ciphertext Attacks">CCA</abbr>) were seen as theoretical. Furthermore the primary threat to 1Password users was thought to be from an attacker stealing the data once and pursuing an off-line attack. It did not anticipate an attacker who could tamper with user data that would be subsequently processed by the legitimate owner.</p>

<p>CCAs are no longer just theoretical, and we also see (and encourage) widespread storage of 1Password data in &ldquo;the cloud&rdquo; for syncing. Thus data integrity needs to be addressed in our new design. </p>

<p>Instead of trying to design against particular CCAs or particular mischief that can be done through data manipulation, we simply authenticate everything we can. Authenticated encryption is used whenever we encrypt, and HMACs are calculated over the elements in each item. The item is rejected if the <abbr title="Message Authentication Code">MAC</abbr> does not verify. The Encrypt-then-<abbr title="Message Authentication Code">MAC</abbr> construction is better thought of as &ldquo;Verify-and-only-then-Decrypt.&rdquo;</p>

<h2 id="building-blocks">Building blocks</h2>

<h3 id="keys">Keys</h3>

<p>We handle a variety of keys, the purpose and derivation of which will be described in later sections.</p>

<ol>
  <li>Master Password (OK, this one isn&rsquo;t a &ldquo;key&rdquo;)</li>
  <li>Derived encryption key.</li>
  <li>Derived <abbr title="Message Authentication Code">MAC</abbr> key.</li>
  <li>Master encryption key.</li>
  <li>Master <abbr title="Message Authentication Code">MAC</abbr> key.</li>
  <li>Overview encryption key.</li>
  <li>Overview <abbr title="Message Authentication Code">MAC</abbr> key.</li>
  <li>Item encryption key (item specific).</li>
  <li>Item <abbr title="Message Authentication Code">MAC</abbr> key (item specific).</li>
</ol>

<p>As an overview of the role of these various keys, note that the secret content of each item is encrypted a unique pair of keys (encryption and <abbr title="Message Authentication Code">MAC</abbr>) for that item. The relationship between an item key and the users Master Password can be summarized in song: </p>

<p><em>Each item key&rsquo;s encrypted with the master key</em><br />
<em>And the master key&rsquo;s encrypted with the derived key</em><br />
<em>And the derived key comes from the MP</em><br />
<em>Oh hear the word of the XOR</em><br />
<em>Them keys, them keys, them random keys</em> (3x)<br />
<em>Oh hear the word of the XOR</em></p>

<p>All of the encryption keys are 256-bit keys for use with <abbr title="Advanced Encryption Standard">AES</abbr>. This has been a highly requested change. Although 128-bit keys remain more than sufficiently resistant to any brute force attack, moving to 256-bit keys has the side effect of leading us to use a <abbr title="512-bit Secure Hash Algorithm">SHA512</abbr> in our <a href="#key-derivation">key derivation</a>, which may add meaningful strength defenses agains password crackers. Additionally, as the systems that 1Password normally runs on are much more powerful than they were years ago, the additional overhead of using 256-bit keys is no longer a reason not to.</p>

<p>We are aware that the key schedule concerns surrounding 256-bit <abbr title="Advanced Encryption Standard">AES</abbr> keys, and we will continue to keep an eye on attacks against it. We can modify our format and cipher suites to return to 128-bit keys if necessary. The <abbr title="Message Authentication Code">MAC</abbr> keys are also all 256-bit keys.</p>

<p>All keys (other than the key encryption keys derived from the Master Password) are created randomly using <a href="#csrng">cryptographically appropriate random number generation</a>.</p>

<h3 id="uuids">UUIDs</h3>

<p>As in the Agile Keychain format, each item is associated with a unique ID, the UUID. These are 128-bit numbers that are chosen at random when an item is first created. In what follows, we will often use the term &ldquo;UUID&rdquo; to refer to the uppercase hexadecimal representations of a UUID. It should be clear from context when we mean the hexadecimal representation and when we mean the number itself.</p>

<p>Because each UUID is chosen at random, it contains no information about the content of an item. When a user modified information in an item the UUID remains the same, although the time stamp associated with it will change.</p>

<h3 id="opdata">opdata01</h3>

<p>All encrypted data with the exception of some encrypted keys is a specific format we are calling &ldquo;opdata01&rdquo;. </p>

<p>The first 8 bytes of the data are the string &ldquo;opdata01&rdquo;. The next 8 bytes  contain the length in bytes of the plaintext as a little endian unsigned 64 bit integer. The next 16 bytes are the randomly chosen initialization vector.</p>

<p>The plaintext is padded using the following scheme.</p>

<p>If the size of the plaintext is an even multiple of the block size then 1 block of random data is _pre_pended to the plaintext, otherwise between 1 and 15 (inclusive) bytes of random data are _pre_pended to the plaintext to achieve an even multiple of blocks.</p>

<p>The data, including the IV and prepended padding, is encrypted using <abbr title="Advanced Encryption Standard">AES</abbr> in <abbr title="Cipher-block chaining">CBC</abbr> mode with a 256-bit encryption key.</p>

<p>The <abbr title="Hash-Based Message Authentication Code">HMAC</abbr>-<abbr title="256-bit Secure Hash Algorithm">SHA256</abbr> is computed over the entirety of the opdata including header, length, IV and ciphertext using a 256-bit <abbr title="Message Authentication Code">MAC</abbr> key. The 256-bit <abbr title="Message Authentication Code">MAC</abbr> is not truncated. It is appended to the ciphertext.</p>

<p>Depending on where opdata is stored within data files it may be base64 encoded.</p>

<h4 class="no_toc" id="implementation">Implementation</h4>

<p>On the Mac and on iOS we use the CommonCrypto libraries, using <code>kCCHmacAlgSHA256</code> and <code>kCCAlgorithmAES128</code>. We set up the cryptor with</p>

<pre><code>CCCryptorCreate(kCCEncrypt, kCCAlgorithmAES128, 0, encryptionKey, 32, IV, &amp;cryptor)
</code></pre>

<p>and the <abbr title="Message Authentication Code">MAC</abbr> with</p>

<pre><code>CCHmacInit(&amp;context, kCCHmacAlgSHA256, MACKey, kCCKeySizeAES256)
</code></pre>

<h4 class="no_toc" id="rationale">Rationale</h4>

<p>We perform authenticated encryption for the reasons described in the <a href="#authenc">authenticated encryption section</a>.  CommonCrypto does not, at this time, offer any direct authenticated encryption modes, so we use Encrypt-then-<abbr title="Message Authentication Code">MAC</abbr> composition.</p>

<p>We use <abbr title="Cipher-block chaining">CBC</abbr> mode because at this time support for CTR mode is not fully supported in CommonCrypto. With OS X 10.8 and iOS 6 <code>CCCryptorCreateWithMode()</code> appears to be available, but is undocumented outside of the source itself.</p>

<p>We do not use <code>kCCOptionPKCS7Padding</code> as this can lead to padding oracle CCAs (although our use of Encrypt-then-<abbr title="Message Authentication Code">MAC</abbr> <a href="http://cseweb.ucsd.edu/users/mihir/papers/oem.html" title="Authenticated Encryption constructions (Bellare and Namprempre, 2000)">should prevent all CCAs</a>). Instead we do our own random padding as described above. By putting the padding up front, this has the effect of acting like a smaller, additional, IV.</p>

<p>Note that <a href="http://www.ietf.org/id/draft-mcgrew-aead-aes-cbc-hmac-sha2-01.txt" title="IETF Draft: Authenticated Encryption with Associated Data AES-CBC-HMAC">IETF draft for authenticated encryption with associated data</a> was not available in time for our first version of this, but we will certainly consider the simpler padding proposed there in the future.</p>

<h3 id="csrng">Random number generation</h3>

<p>1Password on iOS and OS X uses <a href="http://developer.apple.com/library/ios/#documentation/Security/Reference/RandomizationReference/Reference/reference.html" title="Apple documentation: Randomization Services"><code>SecRandomCopyBytes()</code></a> throughout for its cryptographically secure random numbers. These are used to create the master keys (encryption and <abbr title="Message Authentication Code">MAC</abbr>), overview keys (encryption and <abbr title="Message Authentication Code">MAC</abbr>), and <abbr title="Password Based Key Derivation Function Version 2">PBKDF2</abbr> salt when a new Keychain is created. Subsequently, random numbers are used for item keys (encryption and <abbr title="Message Authentication Code">MAC</abbr>), initialization vectors for <abbr title="Cipher-block chaining">CBC</abbr> encryption, random <abbr title="Cipher-block chaining">CBC</abbr> padding, and UUIDs.</p>

<h2 id="directory-layout">Directory layout</h2>

<p>The top level directory is called <code>onepassword_data</code> and will contain a directory for each profile, currently <code>default</code> is the only profile.  The default folder will contain 16 <a href="#band-files">band files</a>, a <a href="#foldersjs">folders.js file</a>, a <a href="#profilejs">profile.js file</a>, and any number of <a href="#attachments">attachments</a>.</p>

<p>Here is the layout for a sample Cloud Keychain:</p>

<pre><code>onepassword_data
`-- default
    |-- 026AA7B7333B4F925F16DE9E21B912B7_5754B83288A34CD39DE64B45C2F05A9D.attachment
    |-- 6F8CDF100CC99FD55053B77492D97487_072A1462CBDE4E2488FB2DA16D96B84B.attachment
    |-- 7BAFBD42CA6F487C94DEC95C187A88A7_C10EA572E11246019A76C4657E302C8B.attachment
    |-- BD1B7C38FDC647E188E172DE2C06C391_A766BB1A9D484174B0D3453E8142118C.attachment
    |-- EE2B42ABEB4D4276AEA51006B3A9C47C_CC20BEA583014AD38E2899853CC48DB8.attachment
    |-- F6A28725D3F0F4DCB857C62A10E612F6_E390C5572D1848E3B128C416162CA60B.attachment
    |-- band_0.js
    |-- band_1.js
    |-- band_2.js
    |-- band_3.js
    |-- band_4.js
    |-- band_5.js
    |-- band_6.js
    |-- band_7.js
    |-- band_8.js
    |-- band_9.js
    |-- band_A.js
    |-- band_B.js
    |-- band_C.js
    |-- band_D.js
    |-- band_E.js
    |-- band_F.js
    |-- folders.js
    `-- profile.js
</code></pre>

<h2 id="band-files">Band files</h2>

<p>An individual band file, say, <code>band_4.j</code>, will contain all of the items with UUIDs that begin with &lsquo;4&rsquo;.</p>

<p>The contents of a band file containing two Login items may look like</p>

<pre><code>ld({
  "468B1E24F93B413DAD57ABE6F1C01DF6": {
    "category": "001",
    "created": 1325483950,
    "d": "b3BkYXRhMDFcAQ ...",
    "folder": "C8CE328220DF4157961787FBA30DAB96",
    "hmac": "30d0rq4tFQvU++mIOElzzI1zilZS0M4Ya10TXmsFz2c=",
    "k": "KGRbxc/qWol4sbs7bwwctO ...",
    "o": "b3BkYXRhMDGCAAAAAAAAAB0ZLRV9xZidd ...",
    "tx": 1347560906,
    "updated": 1325483950,
    "uuid": "468B1E24F93B413DAD57ABE6F1C01DF6"
  },
  "4E36C011EE8348B1B24418218B04018C": {
    "category": "001",
    "created": 1325483950,
    "d": "b3BkYXRhMDFcAQAAAAAAAIyTActXjlxJEgx ...",
    "hmac": "T/8VMqYTr8WJDJqPrJyJl+bFcmS28dn2ZBICwS6d+Tw=",
    "k": "87VRNWy3Pj6 ...",
    "o": "b3BkYXRhMDFyAAAAAAAAADkKPiRdEPFXmLQG9T ...",
    "tx": 1347560906,
    "updated": 1325483951,
    "uuid": "4E36C011EE8348B1B24418218B04018C"
  }
});
</code></pre>

<h2 id="items">Items</h2>

<p>And individual item within a band file may look like</p>

<pre><code>"468B1E24F93B413DAD57ABE6F1C01DF6": {
    "category": "001",
    "created": 1325483950,
    "d": "b3BkYXRhMDFcAQ ...",
    "folder": "C8CE328220DF4157961787FBA30DAB96",
    "hmac": "30d0rq4tFQvU++mIOElzzI1zilZS0M4Ya10TXmsFz2c=",
    "k": "KGRbxc/qWol4sbs7bwwctO ...",
    "o": "b3BkYXRhMDGCAAAAAAAAAB0ZLRV9xZidd ...",
    "tx": 1347560906,
    "updated": 1325483950,
    "uuid": "468B1E24F93B413DAD57ABE6F1C01DF6"
  }
</code></pre>

<p>The item is labeled by its UUID which is also one of the elements within the data. The <abbr title="Message Authentication Code">MAC</abbr> is calculated over all of the items (in C lexicographic order) except for  <code>hmac</code> itself and <code>folder</code>. The folder is excluded because there may be  legitimate instances of an item changing its folder when the <abbr title="Message Authentication Code">MAC</abbr> key is unavailable.</p>

<h3 class="no_toc" id="category"><code>category</code></h3>

<p>Item category indicates whether the item is a Login (&ldquo;100&rdquo;), Secure Note (&ldquo;003&rdquo;), Credit Card (&ldquo;002&rdquo;), etc. These are three digit decimal numbers.</p>

<h3 class="no_toc" id="created"><code>created</code></h3>

<p>Unix time of item creation. All time stamps are Unix time and are written as an ASCII decimal number. Internal representation of Unix time stamps involves data types that are based on 64 bit integers and so will handle dates beyond January 2038.</p>

<h3 class="no_toc" id="d"><code>d</code></h3>

<p>This is the encrypted details for the item.  It is base64 encoded <a href="#opdata">opdata</a>. It is encrypted using the item keys in &ldquo;k&rdquo;.</p>

<h3 class="no_toc" id="folder"><code>folder</code></h3>

<p>This is the UUID of any folder an item may belong to.</p>

<h3 class="no_toc" id="hmac"><code>hmac</code></h3>

<p>This <abbr title="Message Authentication Code">MAC</abbr> (<abbr title="Hash-Based Message Authentication Code">HMAC</abbr>-<abbr title="256-bit Secure Hash Algorithm">SHA256</abbr>) is computed over all of the elements of the item with the exception of the hmac itself. It&rsquo;s computed over the item elements and their values.  Very pseudo code:</p>

<pre><code>elements = Sort_with:@selector(compare:);
for (element in elements) {
	if (element == "hmac") continue;

	CCHmacUpdate(&amp;context, [element UTF8String], [element length]);

	*data = [dict[element] description];
	CCHmacUpdate(&amp;context, [data UTF8String], [data length]);
}
</code></pre>

<p>The <abbr title="Hash-Based Message Authentication Code">HMAC</abbr> is computed using <abbr title="256-bit Secure Hash Algorithm">SHA256</abbr> using the master <abbr title="Message Authentication Code">MAC</abbr> key, and it is base64 encoded.</p>

<h3 class="no_toc" id="k"><code>k</code></h3>

<p>This is the encrypted item and <abbr title="Message Authentication Code">MAC</abbr> keys. It is encrypted with the master encryption key and authenticated with the master <abbr title="Message Authentication Code">MAC</abbr> key.</p>

<p>The last 32 bytes comprise the <abbr title="Hash-Based Message Authentication Code">HMAC</abbr>-<abbr title="256-bit Secure Hash Algorithm">SHA256</abbr> of the IV and the encrypted data. The <abbr title="Message Authentication Code">MAC</abbr> is computed with the master <abbr title="Message Authentication Code">MAC</abbr> key.  The data before the <abbr title="Message Authentication Code">MAC</abbr> is the <abbr title="Advanced Encryption Standard">AES</abbr>-<abbr title="Cipher-block chaining">CBC</abbr> encrypted item keys using unique random 16-byte IV.</p>

<p>The decrypted object is defined by</p>

<pre><code>typedef struct {
  uint8_t crypto_key[32];
  uint8_t mac_key[32];
};
</code></pre>

<p>This is base64 encoded.</p>

<h4 class="no_toc" id="rationale-1">Rationale</h4>

<p>One reason to provide a separate key for each item is to ensure that only a safe amount of data is encrypted under one key. Although we don&rsquo;t expect item details to grow particularly large, any attachment to an item is also encrypted under the item key.</p>

<h3 id="o"><code>o</code></h3>

<p>This is the encrypted details for the item.  It is base64 encoded <a href="#opdata">opdata</a>, encrypted with the overview encryption and <abbr title="Message Authentication Code">MAC</abbr> keys.</p>

<p>There are still cases where we need to find items without having to decrypt all of the data. So we separate the data in each item into &ldquo;overview data&rdquo; and &ldquo;encrypted data&rdquo;. In the clients, the overview data may remain unencrypted (in memory) for the entire time that 1Password is unlocked, while the restricted data for any item is only briefly decrypted.</p>

<p>The decrypted overview data includes the URLs (yes, that is plural) associated with an item, the Title associated with the item, and some additional information depending on the category of an item. For a Login, the username for the item is included. For a Password, the creation time is included. For a secure note, the first 80 bytes of the note are included. For an Identity, the full name is included. For a Credit Card, the <em>masked</em> credit card number is included.</p>

<h3 id="tx"><code>tx</code></h3>

<p>This is the &ldquo;transaction timestamp&rdquo; (Unix time) indicating when this particular item was last modified or added to the current database through synchronization. When an item is modified or added to the database through synchronization, this item will be updated to reflect that. This along with the <code>updated</code> timestamp are used to manage synchronization.</p>

<h3 id="updated"><code>updated</code></h3>

<p>This is a Unix timestamp indicating when the contents of the item were last modified.</p>

<h3 id="uuid"><code>uuid</code></h3>

<p>This is the <a href="#uuids">UUID</a> of the item. Its inclusion within the item ensures that it is included when the <code>hmac</code> is calculated.</p>

<h2 id="foldersjs">folders.js</h2>

<p>The file <code>folders.js</code> has a similar structure to a band file, and each folder listed has a structure very similar to an item in the band file.  For security purposes, it is worth noting that the folder name and the search query for defining a smart folder are encrypted with the overview key. In this version, other than the actual encrypted data, there is no <abbr title="Message Authentication Code">MAC</abbr> for each folder nor for the list of folders themselves.</p>

<h2 id="profilejs">profile.js</h2>

<p>This file contains the encrypted master and overview keys. Here is a sample</p>

<pre><code>var profile={
	"lastUpdatedBy":"Dropbox",
	"updatedAt":1325483930,
	"profileName":"default",
	"salt":"LlfotX7aTZnfL+AjJJYARA==",
	"passwordHint":"fred",
	"masterKey":"b3BkY ...",
	"iterations":227272,
	"uuid":"FFF0089247244BDEAAE714B9AC6FF129",
	"overviewKey":"b3BkYXRhMD ...",
	"createdAt":1347560904};
</code></pre>

<p>The <code>masterKey</code> and the <code>overviewKey</code> are in base64 encoded <a href="#opdata">opdata</a> objects. <code>iterations</code> is the number of <abbr title="Password Based Key Derivation Function Version 2">PBKDF2</abbr> iterations. <code>salt</code> is base64 encoded 16 byte random salt.  These will be described in more detail in the section on <a href="#key-derivation">key derivation</a>.</p>

<p><code>lastUpdatedBy</code> is used to help make the syncing process more efficient. The password hint is stored unobfuscated. We did not feel that we could devise an obfuscation system that could sufficiently resist reverse engineering for the very limited gain of obfuscating the hint.</p>

<h3 id="key-derivation">Key derivation</h3>

<p>We have been able to simplify key derivation because we no longer have multiple security levels of the <a href="http://help.agilebits.com/1Password3/agile_keychain_design.html" title="Agile Keychain Design">Agile Keychain format</a>, where each security level required its own master key. The key derived from the user&rsquo;s Master Password is used to authenticate and decrypt the <code>masterKey</code> and the <code>overviewKey</code> in profile.js.</p>

<h4 class="no_toc" id="from-master-password-to-derived-encryption-and-mac-keys">From Master Password to derived encryption and <abbr title="Message Authentication Code">MAC</abbr> keys</h4>

<p>The Master Password is converted to a UTF8 null terminated string. This is then used in the Common Crypto key derivation function <code>CCKeyDerivationPBKDF</code>, using <abbr title="Password Based Key Derivation Function Version 2">PBKDF2</abbr>, the salt, and <abbr title="Hash-Based Message Authentication Code">HMAC</abbr>-<abbr title="512-bit Secure Hash Algorithm">SHA512</abbr> as the pseudorandom function to derive the encryption key and the <abbr title="Message Authentication Code">MAC</abbr> key. The first 256-bits are the derived encryption key and the remaining 256-bits are the derived <abbr title="Message Authentication Code">MAC</abbr> key.</p>

<p>Using SHA2-512 serves two purposes:</p>

<ol>
  <li>It gives us enough raw material to for both an encryption key and a <abbr title="Message Authentication Code">MAC</abbr> key (each 256-bits).</li>
  <li>By using a wide hash (512 bits) in <abbr title="Password Based Key Derivation Function Version 2">PBKDF2</abbr>, we make it more difficult for GPUs which are constrained by their memory access limitations.</li>
</ol>

<p>At the moment our choice of <abbr title="Password Based Key Derivation Function Version 2">PBKDF2</abbr> over <a href="http://tools.ietf.org/html/draft-josefsson-scrypt-kdf-00" title="The scrypt Password-Based Key Derivation Function">scrypt</a> is largely motivated by the fact <abbr title="Password Based Key Derivation Function Version 2">PBKDF2</abbr> is available in the system libraries for the platforms that we use. We may migrate to scrypt, or some other successor to <abbr title="Password Based Key Derivation Function Version 2">PBKDF2</abbr>, in future.</p>

<h4 class="no_toc" id="from-derived-keys-to-master-keys-and-beyond">From derived keys to master keys and beyond</h4>

<p>The derived keys are used to decrypt the contents of <code>masterKey</code> and <code>overviewKey</code>.  The <code>masterKey</code> and the <code>overviewKey</code> are base64 encoded <a href="#opdata">opdata</a> objects.</p>

<p>The plaintext of the <code>masterKey</code> is 256 bytes of data selected <a href="#csrng">randomly</a> when the keychain was first created. The plaintext of the <code>overviewKey</code> is 64 bytes selected <a href="#csrng">randomly</a> when the keychain was first created.</p>

<p>The 256 byte (2048 bit) plaintext content of the masterKey is then hashed with <abbr title="Secure Hash Algorithm">SHA</abbr>-512. The first 32 bytes (256-bits) of the resulting hash are the master encryption key, and the second 32 bytes are the master hmac key.</p>

<p>The master keys (encryption and <abbr title="Message Authentication Code">MAC</abbr>) are used to encrypt the item specific item keys within each item. These in turn are used to encrypt the data within the item and also any attachment associated with the item.</p>

<p>The overview keys (encryption and <abbr title="Message Authentication Code">MAC</abbr>) are derived in the same way as the master keys. The contents of <code>overviewKey</code> is verified and decrypted with the derived keys; the result is then hashed with <abbr title="Secure Hash Algorithm">SHA</abbr>-512; the first 32 bytes of the hash output will be the overview encryption key; the last 32 bytes of the hash output will be the overview hmac key.</p>

<p>The overview key is used for encrypting the overviews in each item as well as the overviews in for each folder.</p>

<h2 id="attachments">Attachments</h2>

<p>Attachment files are named with the UUID of the item that they are attached to followed by an underscore and then followed by the UUID of the attachment itself. The file is then given the extension &ldquo;.attachment&rdquo;.</p>

<p>The contents can be divided into four sections.</p>

<ol>
  <li>The header (14 bytes)</li>
  <li>The meta-data (up to 2<sup>16</sup> bytes)</li>
  <li>The encrypted icon (up to 2<sup>32</sup> bytes)</li>
  <li>The encrypted data (up to 2<sup>32</sup> bytes)</li>
</ol>

<h3 class="no_toc" id="header">header</h3>

<p>Bytes 1 through 7: <code>OPCLDAT</code><br />
Byte 8: version (0x01 for this first version)<br />
Bytes 9 and 10: metadata size<br />
Bytes 11 through 14: icon size  </p>

<h3 class="no_toc" id="metadata">metadata</h3>

<p>This is then followed by a JSON object containing the meta data (displayed here with whitespace, but there is no whitespace in the actual attachment file.)</p>

<pre><code>{
	"itemUUID":"EE2B4 ...",
	"contentsSize":277153,
	"external":true,
	"updatedAt":1328222369,
	"txTimestamp":1347487884,
	"overview":"b3BkYXRhMDEiAAAAAAAAACMP4CJz/gLE4lwhnyahSY0jBL ...",
	"createdAt":1328222369,
	"uuid":"CC20BE..."
}
</code></pre>

<h3 class="no_toc" id="encrypted-icon">encrypted icon</h3>

<p>This is <a href="#opdata">opdata</a>. In attachment files these are <em>not</em> base64 encoded.</p>

<h3 class="no_toc" id="encrypted-contents">encrypted contents</h3>

<p>This is <a href="#opdata">opdata</a>, encrypted with the associated item and <abbr title="Message Authentication Code">MAC</abbr> keys. In attachment files these are <em>not</em> base64 encoded.</p>

<h2 id="sample-data-and-further-details">Sample data and further details</h2>

<p>For those who wish to explore and analyze this further, we posted a <a href="/files/SampleData/" title="Cloud Keychain sample file">sample keychain</a>.</p>

<p>Although we don&rsquo;t anticipate publishing source code for manipulating 1Password keychains, others, unaffiliated with AgileBits, have begun to.</p>

<ul>
  <li>James Brown (roguelazer) has published a <a href="https://github.com/Roguelazer/onepasswordpy" title="Third party Python implementation of 1Password keychains">Python implementation for 1Password keychains</a>.</li>
</ul>


    
    
    <footer>
        <p>Copyright &copy; 2013, AgileBits, Inc.</p>
    </footer>
    </section>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
        <script>window.jQuery || document.write('<script src="js/vendor/jquery-1.8.2.min.js"><\/script>')</script>
        <script src="/js/vendor/fancybox/jquery.mousewheel-3.0.6.pack.js"></script>
        <script src="/js/vendor/jquery.hashchange.min.js"></script>
        <script src="/js/vendor/jquery.easytabs.min.js"></script>
        <script src="/js/vendor/fancybox/jquery.fancybox.pack.js"></script>
        <script src="/js/vendor/image-annotate/jquery.annotate.js"></script>
        <script src="/js/plugins.js"></script>
        <script src="/js/main.js"></script>

        <!-- Google Analytics: change UA-XXXXX-X to be your site's ID. -->
        <script>
            var _gaq=[['_setAccount','UA-XXXXX-X'],['_trackPageview']];
            (function(d,t){var g=d.createElement(t),s=d.getElementsByTagName(t)[0];
            g.src=('https:'==location.protocol?'//ssl':'//www')+'.google-analytics.com/ga.js';
            s.parentNode.insertBefore(g,s)}(document,'script'));
        </script>
    </div>
    </body>
</html>
